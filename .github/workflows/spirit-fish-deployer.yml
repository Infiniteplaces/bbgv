name: Spirit Fish Deployer

on: push

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      # Checkout the repo
      - name: Checkout code
        uses: actions/checkout@v2

      # Use Node.js 12.x
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      # Restore Node Modules from Cache
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Install & Test
      - run: yarn install
      - run: yarn test

  deploy-staging:
    name: Deploy Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/staging'
    steps:
      # Checkout the repo
      - name: Checkout code
        uses: actions/checkout@v2

      # Use Node.js 12.x
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      # Restore Node Modules from Cache
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Install & Build
      - run: yarn install
      - run: REACT_APP_STAGE=staging NODE_ENV=production CI="" yarn build

      # Deploy & Activate!
      - name: Deploy to Spirit Fish
        env:
          SPIRIT_FISH_RENDERER_ID: ${{ secrets.SPIRIT_FISH_STAGING_RENDERER_ID }}
          SPIRIT_FISH_CLI_TOKEN: ${{ secrets.SPIRIT_FISH_CLI_TOKEN }}
        run: npx spirit-fish deploy $SPIRIT_FISH_RENDERER_ID ./build --activate --token $SPIRIT_FISH_CLI_TOKEN

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/production'
    steps:
      # Checkout the repo
      - name: Checkout code
        uses: actions/checkout@v2

      # Use Node.js 12.x
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      # Restore Node Modules from Cache
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Install & Build
      - run: yarn install
      - run: REACT_APP_STAGE=production NODE_ENV=production CI="" yarn build

      # Deploy & Activate
      - name: Deploy to Spirit Fish
        env:
          SPIRIT_FISH_RENDERER_ID: ${{ secrets.SPIRIT_FISH_STAGING_RENDERER_ID }}
          SPIRIT_FISH_CLI_TOKEN: ${{ secrets.SPIRIT_FISH_CLI_TOKEN }}
        run: npx spirit-fish deploy $SPIRIT_FISH_RENDERER_ID ./build --activate --token $SPIRIT_FISH_CLI_TOKEN
